<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Roy Notes]]></title>
  <link href="http://roynotes.com/atom.xml" rel="self"/>
  <link href="http://roynotes.com/"/>
  <updated>2014-11-30T15:08:27+08:00</updated>
  <id>http://roynotes.com/</id>
  <author>
    <name><![CDATA[roymax]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Happy new year to you!]]></title>
<link href="http://roynotes.com/blog/2014/01/happy-new-year-to-you/"/>
<updated>2014-01-04T15:03:00+08:00</updated>
<id>http://roynotes.com/blog/2014/01/happy-new-year-to-you</id>

      <content type="html"><![CDATA[<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ pry
</span><span class='line'>
</span><span class='line'>2.0.0 (main):0 > 'Happy new year to you!'.each_byte.inject(:+)
</span><span class='line'>=> 2014</span></code></pre></td></tr></table></div></figure>


<p>偶尔在 twitter 上看到这个，惊喜之余翻出<code>inject</code>探个究竟</p>

<p>文档给出这样的例子</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>(5..10).inject(:+)
</span><span class='line'>=> 45</span></code></pre></td></tr></table></div></figure>


<p><code>inject</code>可以解释作<strong>注入</strong>，它是<code>Enumerable</code>其中的一个实例方法，实现了<code>Enumerable</code>模块的类都可以使用它的实例方法，<code>Array</code>类当然实现了它。所以<code>inject</code>的作用就是在每个数组元素之间进行你想做的处理。<strong>Ruby</strong> 的API 文档给出了很直观的例子。</p>

<p>回到开头那行代码就很直白了，将字符串转换成字节码然后相加，最终得到<strong>2014</strong>，令人愉悦的是那个字符串是<em>Happy new year to you!</em>。</p>

<p>尝试用Java来写一下</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>    public static void main(String[] args) {
</span><span class='line'>      String str = "Happy new year to you!";
</span><span class='line'>
</span><span class='line'>      int sum  = 0;
</span><span class='line'>      for(byte b: str.getBytes()) {
</span><span class='line'>          sum += b;
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>      System.out.println(sum);
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>



<p><a rel="bookmark" href="http://roynotes.com/blog/2014/01/happy-new-year-to-you/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[About Fitbit Force]]></title>
<link href="http://roynotes.com/blog/2013/12/about-fitbit-force/"/>
<updated>2013-12-15T16:02:00+08:00</updated>
<id>http://roynotes.com/blog/2013/12/about-fitbit-force</id>

      <content type="html"><![CDATA[<p>过去三周中除了洗澡的时间，我几乎一直佩戴着 Fitbit Force。这是我购买的第一款智能腕带产品，所以我也无法对其与Nike Fuelband、Jawbond UP 等产品对待比较，下面只是我这三周下来的体验感受。</p>

<p><img src="http://d.pr/i/AeyD+" alt="" /></p>

<h3>为何选择 Force</h3>

<p>Force 只是比上一代多了一个小屏幕用于显示时间，当天步行数，公里数，楼梯数，跑步数，闹钟时间等信息。官网介绍上说到在更新后，可以显示来电信息。</p>

<p>正是因为看重这个小屏幕，所以选择了多支付30美元购买了Force 而不是 Flex。购买前当然也对比了 Fuelband 和 UP，不选择这两者的原因很简单，前者价格稍贵、外观线条粗犷、功能性也不占上风，虽然也很喜欢后者，但缺陷在于数据必须通过有线同步，这是一个不能接受的原因。</p>

<p>我通过朋友在 LA 购买，税后的总价约140 刀左右，如果遇上什么电子节，黑色星期五之类的应该能拿到更优惠的价格。</p>

<h3>日常使用</h3>

<p>Force 佩戴非常舒服舒适，重量很轻，有时我还担心它是否有戴在手上，腕带能否扣住，但这几周下来证明这是多余的。</p>

<p>可能由于腕带是橡胶材料的原因，第一次使用时扣上有点困难，但我觉得习惯就好，每次都能很顺利的扣上，而且上面也提到，一般情况下不会脱落，我也只在一次打篮球时被撞脱过。</p>

<p>有些报道说Force 能防水，但当你看到背面那个USB充电接口，我相信你也跟我有同样的想法，一定不能戴着它游水和洗澡。但我相信洗手还是没有问题的，所以没有将它摘下。毕竟作为一个跑步/步行运动跟踪设备应该有考虑到一般的防水情况，因手背有大量汗水而导致它工作不良，这也太扯了吧？</p>

<h3>续航能力</h3>

<p>其续航能力真的非常值得称道，从充满电到系统提醒电力不足，它足足工作了15+ 天，朋友 mib 则宣称有三周时间。</p>

<h3>饮食与卡路里</h3>

<p>我每天使用Force 来跟踪步行数，没有关注过饮食数据，不使用的主要原因是需要手工录入，我对于卡路里的控制还没有到强迫症的地步，忽略它。</p>

<h3>睡眠与闹钟</h3>

<blockquote><p>睡前通过长按 Force上的按钮几秒，它将跳出一个秒钟开始计时，意味着它进入收集睡眠数据状态，你该睡了。醒来时重复该动作结束睡眠，或你有设置一个闹钟，闹钟结束时就是你的起库时间。</p></blockquote>

<p>这，跟我理想的睡眠跟踪系统就有点距离了，我需要的是系统能自动分析进入睡眠数据收集，我醒来时它也能自动发现。同时我也需要一个智能闹钟，而不是一个定时闹钟，智能唤醒能帮助我更好的睡眠（我相信该理论并使用 App Store 上的Apps 试验过一段时间）。</p>

<p>当然，有这样的一个时间跟踪也让我更清楚：我的睡眠时间严重不足，平均每天只有7小时。</p>

<h3>Apps</h3>

<p>可以负责任的说，官方Apps虽称不上反人类，但绝对不是经过优良的设计。暂时也找不到可替代官方的Apps。</p>

<p>而且官方Apps 没有中国商店上架，所以你需要切换到香港或美国区下载安装。</p>

<p>感觉打开App 的背景同步功能后，iPhone 掉电较平时更多。</p>

<h3>总结</h3>

<p>因为Force ，我每天会多选择走动来收集数据，甚至有时我会选择楼梯而不是电梯回到办公室。设定每天步行10000步的目标，达成后通过震动你的手腕提醒，每天感受它的震动也是一种快乐与满足。</p>

<p>闹钟虽不尽如人意，但也习惯了每天被Force 震动唤醒。同时能收集睡眠数据，有时我会觉得通过数据能看到更真实的自己。</p>

<p>最后，我想就可以这样描述Fitbit Force，有缺陷但对得起价格，值得购买。</p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/12/about-fitbit-force/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Workflow to Set DNS Servers]]></title>
<link href="http://roynotes.com/blog/2013/12/workflow-to-set-dns-servers/"/>
<updated>2013-12-05T00:21:00+08:00</updated>
<id>http://roynotes.com/blog/2013/12/workflow-to-set-dns-servers</id>

      <content type="html"><![CDATA[<p>一直有在用签名为<a href="24says.com">24says.com</a>的 <strong>Set DNS Servers</strong> 工作流，花了点时间解决以下两个问题(同时加了自己的签名)：</p>

<ol>
<li>直接把支持的 DNS 列出来提示选择</li>
<li><del>不需要每次变更都输入密码</del></li>
</ol>


<p>效果如图：
<img src="http://d.pr/i/MATm+"></p>

<p>下载地址：<a href="http://d.pr/f/tyf4">http://d.pr/f/tyf4</a></p>

<hr />

<ul>
<li><p><strong>UPDATE 2013-12-13</strong> 发现脚本有BUG，下载地址已更新，如有下载请更新一下</p>

<p>  每次更新DNS还是需要输入密码，如果要解决可以将networksetup 加入到sudoer里。</p></li>
</ul>

<p><a rel="bookmark" href="http://roynotes.com/blog/2013/12/workflow-to-set-dns-servers/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[New MacBook Air Bootstarp]]></title>
<link href="http://roynotes.com/blog/2013/11/new-macbook-air-bootstarp/"/>
<updated>2013-11-26T14:17:00+08:00</updated>
<id>http://roynotes.com/blog/2013/11/new-macbook-air-bootstarp</id>

      <content type="html"><![CDATA[<p>新电脑到手了，上一台 MacBook 购于2008年底，到现在整整使用了5年时光。事实上更换过SSD的它到目前为止还一切健康，促使我更换的原因有二：</p>

<ol>
<li>虽然只有5年但也过于沉重</li>
<li>电池退化严重，续航能力为0</li>
</ol>


<p>电池其实已经坏掉好久了，也曾试过买兼容电池但很快又坏了。针对以上两个问题，我一直纠结于Air or Pro(Retina)。事实上Pro已经很轻了，但对于我脆弱的颈椎还是有很大的压力，所以最后还是选择了 MacBook Air 11“，而且我还给她起了一个非常棒的名字：Peter Pan。</p>

<p>旧电脑用了五年，新机到手就没打算过如何做系统迁移，而是选择按需重组系统环境，特记录如下。</p>

<hr />

<h3>系统设置</h3>

<ul>
<li>Caps Lock键改为 Ctrl键</li>
<li>安装了清歌输入法，放弃了鼠须管</li>
<li>在 <em>设置</em> 中将鼠标和触控板能打勾的都勾上</li>
<li>登录 iCloud 打开 MAS 下载已购软件</li>
<li>GoAgentX 科学上网</li>
</ul>


<h3>办公工具</h3>

<ul>
<li>Pages/Nubmers/Keynote 都免费了，赞</li>
</ul>


<blockquote><p>懒得再装 Office，极少使用，用 iWork 足够解决需要了</p></blockquote>

<h3>效率工具</h3>

<ul>
<li><strong>Dropbox</strong> 数据存储同步软件，有计划启用 微盘和百度网盘了，但周边支持太少</li>
<li><strong>Evernote</strong> 笔记类工具，我只用于归档同步</li>
<li><strong>nvALT</strong> 支持 Markdown 的速记工具，这使我可以弃用 Evernote</li>
<li><strong>Byword</strong> 又一个支持 Markdown 的工具，iOS/OSX 支持，内购发布功能</li>
<li><strong>Alfred</strong> 加速启动，加上工作流无比强大，附后工作流推荐，到这里下载

<ul>
<li>Dash</li>
<li>Dash documentation lookup</li>
<li>Flush DNS</li>
<li>Google Suggest</li>
<li>Network Location 快速切换网络位置</li>
<li>Open current Safari tab in Chrome</li>
<li>Toggle Caffeine</li>
<li>Tunnelblick</li>
<li>Wi-Fi Toggle</li>
<li>Workflow Searcher</li>
</ul>
</li>
<li><strong>Spectacle</strong> 分屏工具</li>
<li><strong>Mou</strong> 有时用一下</li>
<li><strong>Marked</strong> 预览 Markdown 的工具</li>
<li><strong>Bartender</strong> 从Menu Bar 收纳一些非常用的 Icon</li>
<li><strong>Fantastical</strong> 替换日历，Bundle购买就装上</li>
<li><strong>Path Finder</strong> 替换 Finder，Bundle购买也一直没用好，继续尝试</li>
<li><strong>1Password</strong> 贵！！！密码好帮手</li>
</ul>


<blockquote><p>通常我会使用 nvALT 速记，以纯文本的方式存储到 Byword 的目录使之可以通过 iCloud 同步，在片段经常整理成型后使用 Byword 的 publish(内购) 能力发布到 Evernote 归档。 从而形成以下工作流 <code>nvALT -&gt; Byword -&gt; Evernote</code></p></blockquote>

<h3>开发工具</h3>

<ul>
<li><strong>IDEA</strong> 它把我用了几年的 Eclipse 给革命了</li>
<li><strong>XCode</strong> 把命令行工具也装上</li>
<li><strong>Homebrew</strong> 方便安装各种包</li>
<li><strong>iTerm2</strong> 替换系统自带的终端</li>
<li><strong>YADR dotfiles</strong> The best vim,git,zsh plugins and the cleanest vimrc you&#8217;ve ever seen https://github.com/skwp/dotfiles
  因为针对zsh/vim/iTerm2/ruby等做了相应的配置，所以应该放到最后设置，提供了很多实用配置。</li>
<li><strong>Sublime Text 2</strong> 已经是开发必备了，它始终让我无法转向 TextMate。插件包管理是必须的

<ul>
<li>Nil theme</li>
<li>Flatland theme</li>
<li>monokai extened color scheme</li>
<li><a href="https://github.com/daylerees/colour-schemes">daylerees colour-schemes</a></li>
<li><a href="https://github.com/vkocubinsky/SublimeTableEditor">TableEditor</a></li>
<li><a href="https://github.com/ttscoff/MarkdownEditing">MarkdownEditing</a></li>
<li>Marked.app Menu 快速预览 markdown</li>
<li>Alignment 自动对齐</li>
<li>SublimeLinter</li>
<li>BrackerHighlighter</li>
<li><a href="http://emmet.io">Emmet</a> the essential toolkit for web-developers</li>
</ul>
</li>
<li><strong>Robomongo</strong> 它把MongoHub给击败了，赞</li>
<li><strong>Sequel Pro</strong> Mysql Client 必备</li>
<li><strong>pgAdmin3</strong> Postgres Client 必备</li>
<li><strong>Postgres.app</strong> 就是 Postgres Server，这货太好用了</li>
<li><strong>Dash</strong> 文档速查工具，配合 Alfred 使用更佳</li>
<li><strong>JewelryBox</strong> ruby版本管理工具，rvm GUI</li>
<li><strong>MacVim</strong> 经常<em>YADR Dotfiles</em> 定制过也挺好用</li>
</ul>


<p><img src="http://d.pr/i/v3ve+"></p>

<p><img src="http://d.pr/i/tBL2+"></p>

<p><img src="http://d.pr/i/Z8hN+"></p>

<h3>网络工具</h3>

<ul>
<li><strong>QQ</strong> 这货耗电，但也离不开</li>
<li><strong>迅雷</strong> 会员还是挺好用的</li>
<li><strong>Chrome</strong> 主力还是 Safari，需要它的 Apps</li>
<li><strong>Forklift</strong> FTP工具，冻点购买，够用也比较便宜</li>
</ul>


<h3>其他</h3>

<ul>
<li><strong>Pocket</strong> 延时阅读好帮手</li>
<li><strong>VLC</strong> 看片好帮手</li>
<li><strong>Sip</strong> 取色，勉强还行</li>
<li><strong>Tunnelblick</strong> OpenVPN Client，配合 Alfred 使用更佳</li>
<li><strong>tig</strong> Shell 下的 Git UI 工具</li>
<li><strong>Caffeine</strong> 避免长时间离开系统休眠，配合 Alfred 使用更佳</li>
</ul>


<hr />

<p>本来打算随便写写，结果写了这么多&#8230;想到再补</p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/11/new-macbook-air-bootstarp/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Auto sync file with Nitrous.io on Mavericks]]></title>
<link href="http://roynotes.com/blog/2013/11/auto-sync-file-with-nitrous-dot-io-on-mavericks/"/>
<updated>2013-11-15T19:02:00+08:00</updated>
<id>http://roynotes.com/blog/2013/11/auto-sync-file-with-nitrous-dot-io-on-mavericks</id>

      <content type="html"><![CDATA[<p>自从升级到 Mavericks 后，Nitrous.IO 的 <a href="https://www.nitrous.io/mac">OSX App</a> 就失效了，官方的最新版本还没有释放出来，这导致离线编辑自动同步到线上测试变得不可用。</p>

<p>我知道有rsync同步的方法，但一直也懒得去研究，直到我遇到<a href="http://notes.geoffreyd.me/local-file-editing-with-nitrous-io-on-mavericks">这篇文章</a> 后算是解决问题了，只需要一条命令。</p>

<p>开始前需要安装<code>fswatch</code>和<code>unison</code>，前者用于扫描文件变化，后者用于双向实时同步（跨Win/Linux/OSX），而且支持通过 SSH/RSH/Socket 进行同步。如果你也像我一样在使用<a href="http://roynotes.com/blog/the_homebrew_better_than_the_macports">brew</a>，可以通过命令 <code>brew install fswatch unison</code>安装。</p>

<p>然后进入 <code>~/Nitrous.IO/gobox/bin</code> 创建一个同步脚本，我照抄上面的文章</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>#!/bin/bash
</span><span class='line'>fswatch . "date +%H:%M:%S; unison /Users/roymax/Nitrous.IO/gobox/ ssh://action@gobox//home/action/workspace -ui text -terse -batch"</span></code></pre></td></tr></table></div></figure>


<p>当我们需要工作时，只需要进入目录执行<code>./bin/start_sync.sh</code>，当本地编辑文件时将自己上传到 Nitrous.IO 的对应目录了。</p>

<p>不过据本人测试，同步有点延时但总算能够正常工作。</p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/11/auto-sync-file-with-nitrous-dot-io-on-mavericks/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[let's go - revel]]></title>
<link href="http://roynotes.com/blog/2013/09/lets-go-revel/"/>
<updated>2013-09-26T23:05:00+08:00</updated>
<id>http://roynotes.com/blog/2013/09/lets-go-revel</id>

      <content type="html"><![CDATA[<p>部署好<a href="http://roynotes.com/blog/2013/09/let-us-go/">Nitrous.io的Go环境</a>和输入<code>Hello World!!</code>后，接下来试试如何开发一个Web应用，并同样输出<code>Hello World!!</code>，于是找到了<a href="http://robfig.github.io/revel/">Revel</a></p>

<h2>Revel</h2>

<p>官网这样描述它<strong>A high-productivity web framework for the Go language.</strong>，而这里选择的原因只是因为看起来像<code>rails</code>罢了</p>

<p>那么开始吧，要先安装这个框架，照着官网「<a href="http://robfig.github.io/revel/tutorial/gettingstarted.html">Getting Started</a>」</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ ssh gobox # 我配置了[ssh config](/blog/2013/09/let-us-go/)
</span><span class='line'>
</span><span class='line'>(gobox) $ cd workspace
</span><span class='line'>(gobox) $ go get github.com/robfig/revel/revel</span></code></pre></td></tr></table></div></figure>


<p>稍候片刻安装完成，看看目录结构</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>.
</span><span class='line'>├── bin
</span><span class='line'>├── pkg
</span><span class='line'>│   └── linux_amd64
</span><span class='line'>└── src
</span><span class='line'>    ├── code.google.com
</span><span class='line'>    ├── github.com</span></code></pre></td></tr></table></div></figure>


<p>多了几个目录，其中<code>src</code>是依赖库的源代码目录，<code>pkg</code>是编译后的代码目录，<code>bin</code>则是命令行工具，现在我们有了一个<code>revel</code>命令</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>~/workspace$ revel
</span><span class='line'>~
</span><span class='line'>~ revel! http://robfig.github.com/revel
</span><span class='line'>~
</span><span class='line'>usage: revel command [arguments]
</span><span class='line'>
</span><span class='line'>The commands are:
</span><span class='line'>
</span><span class='line'>    new         create a skeleton Revel application
</span><span class='line'>    run         run a Revel application
</span><span class='line'>    build       build a Revel application (e.g. for deployment)
</span><span class='line'>    package     package a Revel application (e.g. for deployment)
</span><span class='line'>    clean       clean a Revel application's temp files
</span><span class='line'>    test        run all tests from the command-line
</span><span class='line'>
</span><span class='line'>Use "revel help [command]" for more information.
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果想了解<code>Nitrous.io</code>默认给我们准备好的开发环境，可以打开<code>~/.bashrc</code>看看，里面包含了一些预设的环境变量。比如安装Go语言需要设置的<code>$GOPATH</code>和<code>$GOROOT</code></p></blockquote>

<h2>First Web App</h2>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ revel new goweb #在src下会生成一个名goweb的项目
</span><span class='line'>$ revel run goweb
</span><span class='line'>~
</span><span class='line'>~ revel! http://robfig.github.com/revel
</span><span class='line'>~
</span><span class='line'>INFO  2013/09/26 15:52:46 revel.go:292: Loaded module testrunner
</span><span class='line'>INFO  2013/09/26 15:52:46 revel.go:292: Loaded module static
</span><span class='line'>INFO  2013/09/26 15:52:46 run.go:57: Running goweb (goweb) in dev mode
</span><span class='line'>INFO  2013/09/26 15:52:46 harness.go:157: Listening on :9000</span></code></pre></td></tr></table></div></figure>


<p>这样就跑起来了，可以看到默认跑在<code>:9000</code>端口，但<code>Nitrous</code>只支持3000,4000,8080,8888这四个端口，那么先把端口改为<code>3000</code></p>

<p>打开<code>~/workspace/src/goweb/conf/app.conf</code>找到第四行<code>http.port=9000</code>改为<code>http.port=3000</code>重新启动<code>revel</code>。</p>

<p>打开boxes列表找出<a href="http://help.nitrous.io/faq-localhost/">预览URL</a>，加上3000端口从浏览器打开可以看到<strong>It Works!</strong>的大字</p>

<p><img src="http://d.pr/i/tL3m+" alt="goweb it works"></p>

<blockquote><p>Tips: 域名很难记，但如果你像我一样在用MacBook，你还可以通过<em>Nitrous</em>的客户端打开<code>Port Forwarding</code>，然后就可以通过<code>http://localhost:&lt;port&gt;</code>来访问你的远端程序了</p></blockquote>

<p><img src="http://d.pr/i/s6zE+" alt="nitrous Port Forwarding"></p>

<p>注意：HTTPS貌似预览访问不了</p>

<h2>再进一步</h2>

<p>只是显示一个<code>It Works!</code>就结束还是单调了点，我打算传一个参数<code>name=roy</code>进去，然后显示<code>Hi,Roy</code></p>

<p>用<code>Sublime Text</code>打开<code>~/Nitrous.IO/gobox</code>，使用<code>cmd+p</code>呼出搜索框输入<code>app.go</code>打开。</p>

<p>通过文档我知道，如果需要传入参数，我可以这么做</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>func (c App) Index(name string) revel.Result {
</span><span class='line'>  return c.Render(name)
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>再打开<code>It Works!</code>所在的模板文件<code>app/views/App/Index.html</code>，同时修改为</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>...
</span><span class='line'>&lt;h1>hi \{\{.name\}\}!!&lt;/h1>
</span><span class='line'>...#省略上下HTML部分</span></code></pre></td></tr></table></div></figure>


<p>再刷新浏览器发现只显示出现<code>hi</code>，再把URL修改为<code>http://localhost:3000/?name=Roy</code>看看结果吧。</p>

<h2>后记</h2>

<p>观察一下<code>revel</code>生成的<code>goweb</code>项目，你会发现目录结构跟<code>rails</code>真的差不多，简单的摸索已经可以上手。接下来，或者可以试试连接数据库操作了。</p>

<hr />

<p>留下<a href="https://www.nitrous.io/join/YsusrqFe8dY">Nitrous小尾巴</a>求闪电: <a href="https://www.nitrous.io/join/YsusrqFe8dY">https://www.nitrous.io/join/YsusrqFe8dY</a></p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/09/lets-go-revel/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[let us Go]]></title>
<link href="http://roynotes.com/blog/2013/09/let-us-go/"/>
<updated>2013-09-18T23:00:00+08:00</updated>
<id>http://roynotes.com/blog/2013/09/let-us-go</id>

      <content type="html"><![CDATA[<h2>简介</h2>

<p>这里有两个主角，一个是 Nitrous.io，另一个是Go。正因为想学Go，所以想把一些学习过程记录下来</p>

<h3>Nitrous.io</h3>

<p>很早就知道 Nitrous.io 这个东西了，当时没有太多的感觉，没太多关注。最近无意中真正注册了一个帐号才发现，这不是一个所谓的 <em>云IDE</em> 这么简单，它还可以建立一个线上的虚拟开发环境，进行线上开发和测试，就像在本地用 <em>Vagrant</em> 进行开发一样。</p>

<h3>Go</h3>

<p>我想 Go 语言堪称当前最热的新开发语言了吧，除了系出 google 名门外，一些富现代感的特性让人赞不绝口。</p>

<h2>开始</h2>

<p>注册过程就跳过不表了，激活帐号后可以通过提供免费方案创造一个虚拟机，默认可选 Rails / node.js / Python / Go 四种预先定制的开发环境 <em>box</em> 。事实上这是一个基于 <strong>Ubuntu</strong> 的虚拟机，常用的<a href="http://help.nitrous.io/box-interpreters-and-tools/">开发工具一应俱全</a>，比如: git, hg, build-essential。你甚至可以在上面安装任意软件，如：JVM、Lua 或其他。我在这里选择了基于 <em>Go</em> 的模板虚拟环境!</p>

<p>同时，还可以选择服务器所在地区，我选的是亚洲区域，总体上来说速度还可以接受。</p>

<p>一切Ok后将进入如下图的在线开发环境工作台</p>

<p><img src="http://d.pr/i/MqOD+"></p>

<p>工作台的左方为项目目录树，中间有编辑区，下方是终端控制台。</p>

<h3>Hello World</h3>

<p>在终端输入命令</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>action@gobox-31437:~$ cd workspace/ && touch hello.go
</span><span class='line'>action@gobox-31437:~/workspace$ ls
</span><span class='line'>hi.go</span></code></pre></td></tr></table></div></figure>


<p>然后可以通过IDE左方的目录树点击<code>workspace</code>发现刚才创建的<code>hi.go</code>文件，双击打开并输入</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="k">package</span> <span class="n">main</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fmt</span><span class="p">.</span><span class="n">Println</span><span class="p">(</span><span class="s">&quot;Hello, World!!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>回到终端，我可以使用 <code>go run hi.go</code> 执行它然后将回显 <strong>Hello World!!</strong></p>

<h3>像Vagrant一样</h3>

<p>事实上，Nitrous连作为一个好用的文本编辑器都不够格，那如何胜任开发的重任呢，这不是有点鸡肋吗？事实上，可以把Nitrous当Vagrant来使，好处有</p>

<ul>
<li>不占本地资源：硬盘、内存和CPU
  SSD还是挺贵的</li>
<li>不需要安装vagrant</li>
<li>我可怜的08年 MacBook 风扇不再狂转</li>
<li>工作环境云同步，网吧也能写代码</li>
</ul>


<p>Vagrant 有一个很好的功能就是文件同步，在本地使用习惯的 IDE 进行开发，文件实时同步在虚拟环境测试。既然 Nitrous 的线上 IDE 不好用，那么可以使用本地顺手的 IDE 进行开发。</p>

<p>针对 Mac 可以下载官方的客户端，并打开文件同步功能</p>

<p><img src="http://d.pr/i/Z3Zd+"></p>

<p>这时将在<code>Home</code>目录创建一个名为<code>Nitrous.IO</code>的文件夹并进行同步，同步完成后将多了一个对应 box 命名的文件夹，内容为虚拟环境的<code>Home</code>目录。用 <code>sublime text 2</code> 打开刚才创建的<code>hi.rb</code>，本地做任何修改将在线上IDE看到即时变化。</p>

<p>另外，还可以使用 <code>iTerm</code> 来替换线上的终端环境。</p>

<p>打开<a href="https://www.nitrous.io/app#/boxes">https://www.nitrous.io/app#/boxes</a> 选中已创建的box 会发现有一项<code>SSH URI</code>。只要点击这个URI，<code>Safari</code>就会询问授权打开默认终端。当然，你也可以通过命令行在<code>iTerm</code>中输入打开远程终端，因为使用的是ssh 密钥认证所以整个过程无需密码</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>ssh action@URI -p PORT</span></code></pre></td></tr></table></div></figure>


<p>有时，从终端输入命令太繁琐了，可以在<code>~/.ssh/</code>创建一个<code>config</code>文件，内容如下</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>#~/.ssh/config
</span><span class='line'>Host gobox
</span><span class='line'>  HostName apne1.actionbox.io
</span><span class='line'>  User action
</span><span class='line'>  Port 12345
</span><span class='line'>  IdentityFile ~/.ssh/id_rsa</span></code></pre></td></tr></table></div></figure>


<p>保存后即可通过命令<code>ssh gobox</code>进入远端命令行</p>

<p>另一种方法是配置一下<code>iTerm</code>，创建一个 <code>Profiles</code>并设置一个快捷键快速打开进入远端</p>

<p><img src="http://d.pr/i/5XB0+"></p>

<hr />

<p>开发环境基本准备好了，接下来我要看看如何用Go做一个Web应用。</p>

<p>最后，如果你想试用 Nitrous，欢迎点击 <a href="https://www.nitrous.io/join/YsusrqFe8dY">Nitrous小尾巴</a> 帮助我赞点小闪电。</p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/09/let-us-go/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[get my fund value]]></title>
<link href="http://roynotes.com/blog/2013/08/get-my-fund-value/"/>
<updated>2013-08-18T20:17:00+08:00</updated>
<id>http://roynotes.com/blog/2013/08/get-my-fund-value</id>

      <content type="html"><![CDATA[<p>回想2008年，头脑发热买了一批基金，而且是在暴跌的前夕。无需有太多的猜想也知道，必亏无疑的，直到今天每一只在未计息和通货的情况下也亏损30%左右。是的，无论基于什么价值投资也好，沉没成本也好我都好像应该卖了它，事实上是我一直也没有将它们卖出。每隔一段时间我都会看看他们的「收益」如何。</p>

<p>基金工具有很多，但没有一个我觉得称心的，我只是想偶尔看一下，不想录入太多不必要的表单。我只想录入基金编号，本金和份额，得到当前的价值即可。</p>

<p>以前，我是用一个Excel文件记录下每一只基金，忘记了调用一个什么函数动态从一个基金网站抓取当天的净值数据，后来这个文件丢失了，我只好每次查询每一只基金并输入净值数据。</p>

<p>这个周末，刚好看到一个便捷的<a href="http://www.juhe.cn/docs/api/id/25">基金接口</a>后，我决定写一个小脚本完成我的小需求。</p>

<div><script src='https://gist.github.com/6261332.js?file=data.yaml'></script>
<noscript><pre><code>funds:
  - 
    code: &quot;375010&quot;
    capital: 10000
    units: 3353
  - 
    code: &quot;270002&quot;
    capital: 5000
    units: 2544.47
  # and more</code></pre></noscript></div>




<div><script src='https://gist.github.com/6261332.js?file=fund.rb'></script>
<noscript><pre><code># encoding: utf-8

require &quot;httparty&quot;
require &quot;json&quot;
require &quot;settingslogic&quot;
#require &#39;terminal-table&#39;
require &#39;text-table&#39;
require &#39;colorize&#39;

# 基金查询小工具

class Settings &lt; Settingslogic
  source &quot;data.yml&quot;
end

key = &quot;&quot;
response = HTTParty.get(&quot;http://web.juhe.cn:8080/fund/netdata/all?key=#{key}&quot;)

fund_data = JSON.parse(response.body)
myfunds = Settings[:funds]

table = Text::Table.new
table.head = [&#39;名称&#39;, &#39;余额&#39;, &#39;收益&#39;]

# table = Terminal::Table.new :headings =&gt; [&#39;名称&#39;, &#39;余额&#39; ,  &#39;收益&#39;] do |t|
fund_data[&quot;result&quot;][0].each do |key, fund|
  myfunds.each do |my|
    if my[&quot;code&quot;] == fund[&quot;code&quot;]
      balance = fund[&quot;newnet&quot;].to_f * my[&quot;units&quot;].to_f
      mynet = (balance - my[&quot;capital&quot;] ).round(2)
      # t.add_row [&quot;#{fund[&quot;name&quot;]}(#{fund[&quot;code&quot;]})&quot;, &quot;#{balance.round(2)}&quot;, &quot;#{mynet &gt; 0 ? mynet.to_s.red : mynet.to_s.green}&quot;]
      table.rows &lt;&lt; [&quot;#{fund[&quot;name&quot;]}(#{fund[&quot;code&quot;]})&quot;, &quot;#{balance.round(2)}&quot;, &quot;#{mynet &gt; 0 ? mynet.to_s.red : mynet.to_s.green}&quot;]
    end
  end
end
# end
p table
</code></pre></noscript></div>


<p><code>ruby 1.9.3</code>测试通过，依赖<code>httparty</code>,<code>settingslogic</code>,<code>text-table</code>,<code>colorize</code>，运行前请确认已经安装以上gem，同时需要到<a href="http://www.juhe.cn">juhe.cn</a>申请一个API KEY。</p>

<p>运行效果，看这个</p>

<p><img class="" src="http://d.pr/i/gjbf+"></p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/08/get-my-fund-value/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[twitter finagle]]></title>
<link href="http://roynotes.com/blog/2013/04/twitter-finagle/"/>
<updated>2013-04-14T11:28:00+08:00</updated>
<id>http://roynotes.com/blog/2013/04/twitter-finagle</id>

      <content type="html"><![CDATA[<h2>简介</h2>

<p>Finagle是twitter内部的一个非常重要的核心工具库，它大量被应用于twitter内部系统。Finagle是一个异步的网络框架，能被用于实现异步的RPC客户端程序和基于JVM语言体系的服务端，包括Java，Scala，Jython等。</p>

<p>它还支持众多协议</p>

<ul>
<li>HTTP</li>
<li>HTTP Streaming (Comet)</li>
<li>Thrift</li>
<li>Memcached/Kestrel</li>
<li>MySQL</li>
<li>protobuf</li>
<li>&#8230;&#8230;</li>
</ul>


<p>基于Finagle的Server端特性支持</p>

<ul>
<li>Backpressure (to defend against abusive clients)</li>
<li>Service Registration (e.g., via Zookeeper)</li>
<li>Distributed Tracing</li>
<li>OpenSSL</li>
</ul>


<p>基于Finagle的Client端特性支持</p>

<ul>
<li>Connection Pooling</li>
<li>Load Balancing</li>
<li>Failure Detection</li>
<li>Failover/Retry</li>
<li>Distributed Tracing (à la Dapper)</li>
<li>Service Discovery (e.g., via Zookeeper)</li>
<li>Rich Statistics</li>
<li>Native OpenSSL Bindings</li>
</ul>


<p>twitter是Scala重度用户，同时Finagle也是写于Scala，围绕Finagle衍生了很多辅助的项目</p>

<ul>
<li><a href="https://github.com/twitter/scrooge">scrooge</a></li>
<li><a href="https://github.com/twitter/sbt-scrooge">sbt-scrooge</a></li>
<li><a href="https://github.com/twitter/scala-boostrapper">scala-bootstrapper</a></li>
<li><a href="https//github.com/twitter/sbt-package-dist">sbt-package-dist</a></li>
<li>&#8230;&#8230;</li>
</ul>


<p>其中<code>scrooge</code>是一个<strong>thrift</strong>代码生成器的Scala版本，是<em>Apapche Thrift</em>版本的替换且保持与它兼容，它同时用于生成符合<em>Finagle</em>使用的代码，当前只支持生成Scala和Java文件。而<code>sbt-scrooge</code>则是一个sbt插件。</p>

<p><code>scala-bootstrapper</code>类似于一个脚手架工具，用于生成一个基础的<code>finagle</code>项目</p>

<p><code>sbt-package-dist</code>则是一个基于sbt的打包插件</p>

<h2>Hello World</h2>

<p>这个<code>Hello World</code>将由<em>scala-bootstrapper</em>项目入手，该项目是一个ruby项目，因此确保有ruby安装环境。</p>

<p>通过<code>scala-bootstrapper &lt;project&gt;</code>可以生成项目，但必须先建立一个项目目录，否则在当前目录创建</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ mkdir myfinagle && cd myfinagle
</span><span class='line'>$ scala-bootstrapper myfinagle
</span><span class='line'>writing Capfile
</span><span class='line'>writing config/development.scala
</span><span class='line'>writing config/production.scala
</span><span class='line'>writing config/staging.scala
</span><span class='line'>writing config/test.scala
</span><span class='line'>writing Gemfile
</span><span class='line'>writing project/build/MyfinagleProject.scala
</span><span class='line'>writing project/build.properties
</span><span class='line'>writing project/plugins/Plugins.scala
</span><span class='line'>writing run
</span><span class='line'>writing src/main/scala/com/twitter/myfinagle/MyfinagleServiceImpl.scala
</span><span class='line'>writing src/main/scala/com/twitter/myfinagle/config/MyfinagleServiceConfig.scala
</span><span class='line'>writing src/main/scala/com/twitter/myfinagle/Main.scala
</span><span class='line'>writing src/main/thrift/myfinagle.thrift
</span><span class='line'>writing src/scripts/console
</span><span class='line'>writing src/scripts/startup.sh
</span><span class='line'>writing src/test/scala/com/twitter/myfinagle/AbstractSpec.scala
</span><span class='line'>writing src/test/scala/com/twitter/myfinagle/MyfinagleServiceSpec.scala</span></code></pre></td></tr></table></div></figure>


<p>我还根据需要，修改了一些依赖配置</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>.....
</span><span class='line'>
</span><span class='line'>libraryDependencies ++= Seq(
</span><span class='line'>  "org.scala-lang" % "jline"                 % “2.9.1”,  #升级版本
</span><span class='line'>  "com.twitter"    % "scrooge-generator"     % "3.0.8" intransitive(),  #升级版本
</span><span class='line'>  "com.twitter"    % "scrooge-runtime"       % "3.0.8" intransitive(),  #升级版本
</span><span class='line'>  "com.twitter"    % "finagle-core"          % “6.1.2”,  #升级版本
</span><span class='line'>  "com.twitter"    % "finagle-thrift"        % “6.1.2”,  #升级版本 
</span><span class='line'>  "com.twitter"    % "finagle-ostrich4"      % “6.1.2”,  #升级版本
</span><span class='line'>  "org.scalatest" %% "scalatest"             % "1.7.1" % "test",
</span><span class='line'>  "com.twitter"   %% "scalatest-mixins"      % "1.1.0" % "test"
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>CompileThriftScrooge.scroogeVersion := "3.0.8"  #升级版本
</span></code></pre></td></tr></table></div></figure>


<p>升级版本后，需要打开<code>src/main/scala/com/twitter/&lt;project&gt;/FinalgeServiceImpl.scala</code>将最后的<code>shutdown()</code>方法删除，否则无法编译通过</p>

<p>最后按照项目目录下的<code>TUTORIAL.md</code>执行更新和测试启动是否成功</p>

<p>但要正常运行，请看有哪些坑吧</p>

<h2>坑</h2>

<h3>sbt</h3>

<ul>
<li>执行<code>sbt update</code>前，如果你有自己架设的<em>maven代理服务器</em>，建议添加一下代理仓库，或加到项目根目录下的<code>sbt</code>文件里</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>  #!/bin/bash
</span><span class='line'>
</span><span class='line'>  export SBT_PROXY_REPO="proxy server address"</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>如果打算使用自己的maven代理，将<code>project/plugins.sbt</code>里的<strong>resolvers</strong>部分指定的仓库加入到私有仓库。</p></li>
<li><p>twitter的仓库(http://maven.twttr.com/)已被污染了IP，请确认你能访问该域名，否则应该修改<code>/etc/hosts</code>添加<code>199.59.148.212 maven.twttr.com</code></p></li>
<li><p><code>freemarker</code>也无法访问，好像无关痛痒，注释掉</p></li>
<li><p>没有必要单独安装sbt和scala，因为项目根目录本来就有一个sbt的脚本，它会自动下载并构建一个sbt和scala的运行环境，并且推荐使用该脚本文件</p></li>
<li><p>如果需要使用本地的sbt环境，需要指定sbt版本<code>echo "sbt.version=0.11.3" &gt; ./project/build.properties</code></p></li>
</ul>


<h3>scala-bootstrapper</h3>

<p>尝试<code>gem install scala-bootstrapper</code>发现可以安装，观察一下版本发现有点旧了，最后还是自己编译安装</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ git clone https://github.com/twitter/scala-bootstrapper.git
</span><span class='line'>$ cd scala-bootstrapper
</span><span class='line'>$ rake build
</span><span class='line'>$ gem install pkg/scala-bootstrapper-*.gem</span></code></pre></td></tr></table></div></figure>


<p>但我在<code>rake build</code>这一步时遇到问题</p>

<p>  fail &#8220;ERROR: &#8216;rake/rdoctask&#8217; is obsolete and no longer supported. Use &#8216;rdoc/task&#8217; (available in RDoc 2.4.2+) instead.&#8221;</p>

<p>最后通过修改源代码解决</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'># Add this line just before the require to fix the deprecation notice
</span><span class='line'>$LOAD_PATH.sort_by! { |p| p.match(%r[/rake\-]) ? 1 : 0 }
</span><span class='line'>
</span><span class='line'># 找到rake/rdoctask 替换为 rdoc/task
</span><span class='line'>require 'rdoc/task'</span></code></pre></td></tr></table></div></figure>


<h3>scrooge</h3>

<p>编译脚本会从twitter的仓库下载一个<a href="http://maven.twttr.com/com/twitter/scrooge/3.0.0/">scrooge-3.0.0.zip</a>的压缩包，不知道什么原因，scrooge的最新版本没有上传到仓库，同时也找不到这个最新版本的zip。那么如果需要使用新版本的scrooge，那要么使用<code>maven</code>，要么自己打一个zip包放到本地仓库</p>

<p>我不知道twitter内部的计划，我通过以下方法生成了一个<code>3.0.8</code>版本</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>cd /tmp
</span><span class='line'>git clone git://github.com/twitter/scrooge.git
</span><span class='line'>cd scrooge 
</span><span class='line'>mvn package dependency:copy-dependencies
</span><span class='line'>
</span><span class='line'>cd /tmp
</span><span class='line'>wget http://maven.twttr.com/com/twitter/scrooge/3.0.1/scrooge-3.0.1.zip
</span><span class='line'>unzip scrooge-3.0.1
</span><span class='line'>mv scrooge-3.0.1 scrooge-3.0.8
</span><span class='line'>cd scrooge-3.0.8 
</span><span class='line'>rm -rf *.jar libs/*.jar
</span><span class='line'>sed -i "" -e "s/3.0.1/3.0.8/g" ./scripts/scrooge
</span><span class='line'>cp /tmp/scrooge/scrooge-generator/target/scrooge-generator-3.0.8.jar ./scrooge-3.0.8.jar
</span><span class='line'>cp -r /tmp/scrooge/scrooge-generator/target/dependency/*.jar libs/
</span><span class='line'>cd ..
</span><span class='line'>zip -r scrooge-3.0.8.zip scrooge-3.0.8
</span><span class='line'>cp scrooge-3.0.8.zip ~/.m2/repository/com/twitter/scrooge/3.0.8/</span></code></pre></td></tr></table></div></figure>


<h2>后记</h2>

<p><code>Finagle</code>作为twitter的核心工具库，性能和稳定性应该还是有一定保障的，而且从公布开源的出来的一系列工具堆栈非常有吸引力，如用于数据收集和报告的ostrich，性能分析的zipkin等。但文档确认稍候欠奉，会遇上各种坑。</p>

<p>再加上Scala的各版本不太兼容，稍不注意你就找不到对应的包。比如我希望设置用于scala-2.10.0版本就遇到些问题，而且花了好些时间才解决。估计scala发行版本再不保障版本的向前兼容，估计以后也很难普及。scala的社区个人觉得还是不够好，关注的人太少。scala在github上1196人加星，374人fork；而ruby的数据则是3826/867。</p>

<p>另不知基于什么原因，估计twitter已经开始将sbt迁移到maven，以至于有多个sbt插件项目已经至少半年以上没有更新了，其中就包括了<code>scala-bootstrapper</code>和<code>sbt-scrooge</code>。所以，如果确定要使用finagle，建议还是使用maven吧，反正<code>scala-bootstrapper</code>生成的代码也没帮到多少，自己用<a href="https://github.com/n8han/giter8">giter8</a>也不是什么难事。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://sunwenfeng.blogspot.com/2012/12/twitter-finagle-scalarpc.html">Finagle+Spring</a></li>
<li><a href="https://github.com/twitter/scala_school">https://github.com/twitter/scala_school</a></li>
<li><a href="http://twitter.github.io/effectivescala/index-cn.html">Effective scala</a></li>
<li><a href="https://github.com/fujohnwang/real_world_scala/blob/master/02_sbt.markdown">使用SBT构建Scala应用</a></li>
</ul>

<p><a rel="bookmark" href="http://roynotes.com/blog/2013/04/twitter-finagle/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Alfred Workflows]]></title>
<link href="http://roynotes.com/blog/2013/03/alfred-workflows/"/>
<updated>2013-03-23T18:31:00+08:00</updated>
<id>http://roynotes.com/blog/2013/03/alfred-workflows</id>

      <content type="html"><![CDATA[<p>早几天将Alfred升级到2.0，一些旧的扩展都不能用了，整理了一些我需要用到的workflows，可以通过<a href="https://www.dropbox.com/sh/ihmoq5ll1zqubf7/z-T7mAHipJ">Dropbox</a>下载</p>

<h3>Dash documentation lookup</h3>

<p>可以通过快捷<code>dl</code>快速查询Dash.app，例子</p>

<ul>
<li><code>dl java:String</code>查询java的String类</li>
<li><code>dl pop</code> 所有包括pop关键字的API</li>
</ul>


<h3>Flush DNS</h3>

<p>这是一个重写自1.x扩展的工作流，作用是刷新DNS缓存。比较简单，但经常用到，通过<code>flush</code>关键字调用。</p>

<h3>Github</h3>

<p>快速查询github，详细看<a href="http://www.v2ex.com/t/63356">这里</a></p>

<h3>Network Location</h3>

<p>更改网络位置，之前因为在公司需要指定IP，这种快速切换网络位置的功能比较实用。因为是从我的配置中导出，所以这里将快捷键设置成<code>lo {query}</code></p>

<h3>The Pirate Bay</h3>

<p><a href="http://lucifr.com/2013/03/18/yet-another-the-pirate-bay-workflow-for-alfred-2/">看这里吧</a></p>

<h3>WiFi Toggle</h3>

<p>通过<code>wifi</code>触发打开关闭wifi</p>

<h3>Startup News</h3>

<p><a href="http://news.dbanotes.net">Startup News</a> 最近浏览比较多，本来打算做一个，结果<a href="http://www.v2ex.com/t/63210">有人做好了</a></p>

<hr />

<p>UPDATE:</p>

<p>一个Alfred工作流的汇总页 <a href="http://www.alfredworkflow.com/">http://www.alfredworkflow.com/</a></p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2013/03/alfred-workflows/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[copy finder path to terminal]]></title>
<link href="http://roynotes.com/blog/2012/11/copy-finder-path-to-terminal/"/>
<updated>2012-11-24T17:29:00+08:00</updated>
<id>http://roynotes.com/blog/2012/11/copy-finder-path-to-terminal</id>

      <content type="html"><![CDATA[<p>我们有时需要从Finder中将当前路径复制到控制台中，但这路径有时长得令人发指，即使使用Tab键辅助也是很困难。奇怪的是，就这样一个小需求OSX也没有提供。</p>

<p>这是一个有关Finder的小技巧，其实你只需要将Finder上的文件夹拖放到Terminal就可以了，详见视频。</p>

<p><video width='640' height='320' preload='none' controls poster=''><source src='http://d.pr/v/mapm/play' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video>
如无法播放点击<a href="http://d.pr/v/mapm">这里</a>下载</p>

<p>另外推荐一下DTerm这个免费的Terminal工具可以跟Finder配合着使用，通过热键<code>⌘+⇧+↵</code>呼出后就直接在Finder的当前路径进行Terminal操作，相当方便。而且可以跟IDE配合着使用，<a href="http://decimus.net/DTerm">官方首页</a>有详细的介绍及视频展示</p>

<p><img class="" src="http://d.pr/i/6Xbf+"></p>

<p>UPDATE:</p>

<p><em>通过DTerm快速在当前目录打开Terminal</em>，在Finder中热键<code>⌘+⇧+↵</code>呼出DTerm，再按<code>⌘+↵</code></p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2012/11/copy-finder-path-to-terminal/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[problems with meteor]]></title>
<link href="http://roynotes.com/blog/2012/11/problems-with-meteor/"/>
<updated>2012-11-17T12:04:00+08:00</updated>
<id>http://roynotes.com/blog/2012/11/problems-with-meteor</id>

      <content type="html"><![CDATA[<p>最近一个月关注了一下几个前端MVC库，包括有Emberjs/Angularjs/Meteorjs/Backbonejs等，发现所谓的前端后端的界线越来越模糊了。</p>

<p>Angularjs非常吸引人，看起来真的不错，而且还是由google这个业界巨头开源出来，质量值得信任。如果已经有一个良好的后端架构支持，Angularjs/Backbonejs之间必定任选其一都不会错，说到底就是看用哪家的API更舒服一些了。</p>

<p>如果从零开始学习或玩票性质地想做一些尝试性项目，我个人推崇Meteor。这个家伙启动成本真的很低很低，一体化的框架，基于nodejs+mongodb，社区也足够的活跃。当然了，优点也就是缺点，Full Stack Framework就是意味着一些制约了。</p>

<p>Emberjs则有点像Rails，或者直接说就是一个完全遵循Rails思想的框架，而且天生就跟Rails做高整合。如果熟悉Rails并且有一个基于Rails的后端或许是一个不错的选择，但个人感觉学习曲线有点徒（当然这更多是臆测，因为个人上手感觉不大习惯）。</p>

<p>另外还有几个Knockout/CanJS/Batman/Spine就没细看了，从github上的fork和wacth来看，感觉社区活跃度都比不上前面提到的几家。</p>

<p>最后尝试用<a href="http://www.meteor.com">meteor</a>写一个app，遇到一些小问题并记录下来</p>

<h2>加载nodejs package</h2>

<p>Meteor实际上基于nodejs，所以可以直接加载nodejs已有的package</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ meteor create myapp
</span><span class='line'>$ cd myapp/.meteor/local/build/server
</span><span class='line'>$ npm install &lt;package></span></code></pre></td></tr></table></div></figure>


<p>然后用以下方法加载</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>var pkg = __meteor_bootstrap__.require('package_name');</span></code></pre></td></tr></table></div></figure>


<h2>项目结构</h2>

<p>Meteor 有两种方式拆分服务端和客户端代码</p>

<ol>
<li>使用<code>Meteor.is_client</code>和<code>Meteor.is_server</code>区别代码块，<code>meteor create project</code>后生成的代码就是用这种方法。</li>
<li>将服务端和客户端代码分别放到项目根目录下的<code>server</code>和<code>client</code>文件夹。</li>
</ol>


<p>使用第二种方式，需要在项目目录下新建<code>server</code>和<code>client</code>目录，并将Meteor生成的项目的主文件分别拆分到目录，分别命名为<code>${ROOT}/server/proj_server.js</code>和<code>${ROOT}/client/proj_client.js</code>。</p>

<p>另外，在项目根目录下的js文件可以设置公共的方法和变量，它能同时被server和client端调用。</p>

<h2>使用Meteor.http特性</h2>

<p>因为文档看得不够仔细，总是得到一个undefined的错误，后来发现Meteor.http也是Packages之一，所以需要<code>meteor add http</code>才可以使用。</p>

<h2>关于编码</h2>

<p>如果需要通过<code>Meteor.http.get</code>方法获取non-UTF8的内容就需要注意，因为Meteor将response设置成 UTF8返回，并不可以指定encoding。如果确认需要这处理GBK这个字符集，那么需要一点hacking code</p>

<p>修改<code>packages/http/httpcall_server.js</code>文件</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>     var req_options = {
</span><span class='line'>       url: new_url,
</span><span class='line'>       method: method,
</span><span class='line'>-      encoding: "utf8",
</span><span class='line'>+      encoding: options.encoding || "utf8",
</span><span class='line'>       jar: false,
</span><span class='line'>       timeout: options.timeout,
</span><span class='line'>       body: content,</span></code></pre></td></tr></table></div></figure>


<p>然后，你可以这样做</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>  Meteor.methods({getMyFunds: function() {
</span><span class='line'>    this.unblock();
</span><span class='line'>    var result = Meteor.http.get("http://hq.sinajs.cn/list=of110002"
</span><span class='line'>      , { encoding: "base64" }
</span><span class='line'>      );
</span><span class='line'>    if (result.statusCode === 200) {
</span><span class='line'>        var require = __meteor_bootstrap__.require;
</span><span class='line'>        var Iconv = require('iconv').Iconv;
</span><span class='line'>        var iconv = new Iconv('GBK', 'UTF-8//TRANSLIT//IGNORE');
</span><span class='line'>        return iconv.convert(new Buffer(result.content,'base64')).toString();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>  }});</span></code></pre></td></tr></table></div></figure>

<p><a rel="bookmark" href="http://roynotes.com/blog/2012/11/problems-with-meteor/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[kanban in process]]></title>
<link href="http://roynotes.com/blog/2012/11/kanban-in-process/"/>
<updated>2012-11-17T11:16:00+08:00</updated>
<id>http://roynotes.com/blog/2012/11/kanban-in-process</id>

      <content type="html"><![CDATA[<p>重新做了一块看板应用到一个新项目组，并执行三周，继续探索中&#8230;</p>

<h2>简介</h2>

<p>看板的三个主要原则：</p>

<ul>
<li>可视化流程</li>
<li>限制工作的数量</li>
<li>改善周期</li>
</ul>


<h3>约定</h3>

<ul>
<li>所有原始需求放到redmine中</li>
<li>所有的Bug通过redmine提交</li>
<li>黄色便签代表 backlog/story/task</li>
<li>红色便签代表 bug</li>
<li>当前任务项贴上自己的磁贴标记</li>
<li>每周一收集上一周的工作数据</li>
<li>每天早上10点进行立会</li>
<li>按需召开产品分析会议

<ul>
<li>看板上任务不够了</li>
<li>功能优先级调整了</li>
</ul>
</li>
<li>流程顺序，从上到下从左到右</li>
<li>按需发布，由产品负责人决定</li>
<li>每周一收集上周的WIP产生CFD(Cumulative Flow Graph)</li>
</ul>


<h3>需求分析会议上需要明确的内容</h3>

<ul>
<li>任务分解</li>
<li>设计需时</li>
<li>开发需时</li>
<li>按功能优先级制定冲刺目标</li>
</ul>


<h2>版本控制的约定</h2>

<h3>开发过程</h3>

<ul>
<li>基于gitflow的分支模型</li>
<li><code>master</code>分支设置为产品分支，并设置为保护模式，开发人员不能向该分支push代码</li>
<li><code>develop</code>分支设置为开发分支，开发人员每进行一个功能或bug修改需要新建分支操作并完成后合并回来</li>
</ul>


<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>git flow feature start &lt;feature_name>
</span><span class='line'>git add &lt;file>
</span><span class='line'>git ci 
</span><span class='line'># and more ...
</span><span class='line'># need a help?
</span><span class='line'># git flow feature publish &lt;feature_name>
</span><span class='line'># done!
</span><span class='line'>git flow feature finish &lt;feature_name>
</span><span class='line'>git pull origin develop
</span><span class='line'>git push origin develop</span></code></pre></td></tr></table></div></figure>


<h3>发布过程</h3>

<ul>
<li>产品人员决定需要发布时间和特性</li>
<li>所有列入发布范围的特性生成一个<code>release branch</code>待验收测试</li>
<li>所有未列入发布范围的功能或缺陷停止提交到<code>develop</code></li>
<li>所有基于<code>release branch</code>的修改在该分支上进行</li>
<li>发布成功后，发布版本打上指定版本标签，<code>develop</code>允许开放提交</li>
</ul>


<h3>版本标签</h3>

<p>版本标签以<code>x.y.z</code>标记，</p>

<ul>
<li>x 代表重大版本变更</li>
<li>y 代表较多功能特性增加及变更</li>
<li>z 代表针对现有功能做出变更</li>
</ul>

<p><a rel="bookmark" href="http://roynotes.com/blog/2012/11/kanban-in-process/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[mac osx自动添加VPN路由]]></title>
<link href="http://roynotes.com/blog/2012/04/zi-dong-tian-jia-vpnlu-you/"/>
<updated>2012-04-09T17:51:00+08:00</updated>
<id>http://roynotes.com/blog/2012/04/zi-dong-tian-jia-vpnlu-you</id>

      <content type="html"><![CDATA[<p>最近需要频繁使用VPN拨号，但由于网段不一样，每次连上后都需要手工添加路由，在Mac下同样可以通过ip-up和ip-down自动完成路由的添加。</p>

<div><script src='https://gist.github.com/2342505.js?file='></script>
<noscript><pre><code>#!/bin/sh

# VPN_GATEWAY is the remote address of the vpn tunnel
# when ppp executes this script it will pass several values to it
# $5 will hold the remote gateway
VPN_GATEWAY=192.168.20.239
if [ &quot;${5:-}&quot; = &quot;${VPN_GATEWAY}&quot; ]
then
    /sbin/route add 192.168.30.0/24 $5
fi</code></pre></noscript></div>


<p>非常简单的代码，其中第7行的${5:-} 对应远程IP地址，另还有以下参数可以使用</p>

<pre><code>$1 the interface name used by pppd (e.g. ppp3)
$2 the tty device name
$3 the tty device speed
$4 the local IP address for the interface
$5 the remote IP address
$6 the parameter specified by the 'ipparam' option to pppd
</code></pre>

<p>最后，必须赋执行权限</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo chmod a+x /etc/ppp/ip-up
</span><span class='line'>
</span><span class='line'>#查看是否添加成功
</span><span class='line'>$ netstat -nr</span></code></pre></td></tr></table></div></figure>



<p><a rel="bookmark" href="http://roynotes.com/blog/2012/04/zi-dong-tian-jia-vpnlu-you/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[待遇问题]]></title>
<link href="http://roynotes.com/blog/2012/02/about-treatment-question/"/>
<updated>2012-02-24T00:49:00+08:00</updated>
<id>http://roynotes.com/blog/2012/02/about-treatment-question</id>

      <content type="html"><![CDATA[<p>农历年回来后就一直非常紧张地进行招聘工作，幸运的是在不到一个月的时间能够确定了三位技术新同事。</p>

<p>在本周一扎堆报到时的确是让我异常的兴奋，今年的团队建设任务在开始阶段就成效不错。三位新同事中还有两位是资深技术人员，这非常重要，因为今年团队招聘名额不多，但在创业团队中组成一个倒三角架构是可以减少犯错机会的。</p>

<p>遗憾的是在今天其中一位因<code>待遇问题</code>选择了离开，祝福这位共事两天的同事寻觅到自己另一份理想工作。</p>

<p>我们是家创业公司，运营的四年来并没有拿过风投一分钱过日子，我们不太可能给出超越经营成本的薪资成满足大家的待遇要求。事实上，我们也在尽量匹配市场的薪资水平，甚至在有合适的人材时以略超出薪资体系结构的月薪来保持竞争力。</p>

<p><code>待遇问题</code>真是一个好问题，评判标准因人而异，而且没有谁对谁错。判断对错时如果不是过于在乎短期收益，那么最好想想对公司能给予多少的附加值，附加值包括但不限于：</p>

<ul>
<li>是否有充足的成长空间</li>
<li>对行业方向是否认同、一致</li>
<li>是否存在长期投资回报收益（公司可持续发展性）</li>
<li>公司气氛、文化是否吻合</li>
<li>技术创新程度</li>
<li>价值观又是否一致</li>
<li>上司是一个怎样的人</li>
</ul>


<p>这些都属于我值得关注的<code>待遇问题</code>，绝不单纯因为月薪的短期或多或少去加入一家公司，不能臭味相投及DNA不匹配的公司会令我工作得非常痛苦。</p>

<p>未来的时间我们将继续寻找合适的工作伙伴，如果你是一位有多年工作经验的Java开发者，对Rails感兴趣，熟悉linux，非常欢迎将简历投递到邮箱<code>roy.wei#xiangrikui.com</code>。</p>

<p>如果希望了解更多，可以访问 <a href="http://www.xiangrikui.com">向日葵保险网</a></p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2012/02/about-treatment-question/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[node-restify 简介]]></title>
<link href="http://roynotes.com/blog/2012/02/node-restify-intro/"/>
<updated>2012-02-19T22:18:00+08:00</updated>
<id>http://roynotes.com/blog/2012/02/node-restify-intro</id>

      <content type="html"><![CDATA[<p><a href="https://github.com/mcavage/node-restify">restify</a> 是<a href="http://nodejs.org">Node.js</a>的模块。虽然<code>restify</code>的API或多或少的参考了<a href="http://expressjs.com/">express</a>，但<code>restify</code>不是一个MVC框架，它是一套为了能够正确构建REST风格API而诞生的框架。</p>

<h3>安装restify</h3>

<p>将<code>restify</code>安装到目录<code>restify-dmeo</code></p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ mkdir restify-demo
</span><span class='line'>$ cd restify-demo
</span><span class='line'>$ npm install restify</span></code></pre></td></tr></table></div></figure>


<h3>Hello World</h3>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">restify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;restify&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">respond</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;hello &#39;</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">restify</span><span class="p">.</span><span class="nx">createServer</span><span class="p">();</span>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/hello/:name&#39;</span><span class="p">,</span> <span class="nx">respond</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">8080</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;%s listening at %s&#39;</span><span class="p">,</span> <span class="nx">server</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">server</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>保存文件并执行</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">node</span> <span class="nx">app</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="nx">restify</span> <span class="nx">listening</span> <span class="nx">at</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//0.0.0.0:8080</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过curl命令测试，服务器返回HTTP状态码<code>200</code>和一个<code>application/json</code>类型的内容(事实上这里不是)</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">curl</span> <span class="o">-</span><span class="nx">is</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//localhost:8080/hello/roy</span>
</span><span class='line'><span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span> <span class="mi">200</span> <span class="nx">OK</span>
</span><span class='line'><span class="nx">Access</span><span class="o">-</span><span class="nx">Control</span><span class="o">-</span><span class="nx">Allow</span><span class="o">-</span><span class="nx">Origin</span><span class="o">:</span> <span class="o">*</span>
</span><span class='line'><span class="nx">Access</span><span class="o">-</span><span class="nx">Control</span><span class="o">-</span><span class="nx">Allow</span><span class="o">-</span><span class="nx">Headers</span><span class="o">:</span> <span class="nx">Accept</span><span class="p">,</span> <span class="nx">Accept</span><span class="o">-</span><span class="nx">Version</span><span class="p">,</span> <span class="nx">Content</span><span class="o">-</span><span class="nx">Length</span><span class="p">,</span> <span class="nx">Content</span><span class="o">-</span><span class="nx">MD5</span><span class="p">,</span> <span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="p">,</span> <span class="nb">Date</span><span class="p">,</span> <span class="nx">X</span><span class="o">-</span><span class="nx">Api</span><span class="o">-</span><span class="nx">Version</span>
</span><span class='line'><span class="nx">Access</span><span class="o">-</span><span class="nx">Control</span><span class="o">-</span><span class="nx">Expose</span><span class="o">-</span><span class="nx">Headers</span><span class="o">:</span> <span class="nx">X</span><span class="o">-</span><span class="nx">Api</span><span class="o">-</span><span class="nx">Version</span><span class="p">,</span> <span class="nx">X</span><span class="o">-</span><span class="nx">Request</span><span class="o">-</span><span class="nx">Id</span><span class="p">,</span> <span class="nx">X</span><span class="o">-</span><span class="nx">Response</span><span class="o">-</span><span class="nx">Time</span>
</span><span class='line'><span class="nx">Server</span><span class="o">:</span> <span class="nx">restify</span>
</span><span class='line'><span class="nx">X</span><span class="o">-</span><span class="nx">Request</span><span class="o">-</span><span class="nx">Id</span><span class="o">:</span> <span class="nx">ec3e9e55</span><span class="o">-</span><span class="mi">7083</span><span class="o">-</span><span class="mi">4</span><span class="nx">e12</span><span class="o">-</span><span class="mi">93</span><span class="nx">ee</span><span class="o">-</span><span class="mi">9</span><span class="nx">c24a0c5c398</span>
</span><span class='line'><span class="nx">Access</span><span class="o">-</span><span class="nx">Control</span><span class="o">-</span><span class="nx">Allow</span><span class="o">-</span><span class="nx">Methods</span><span class="o">:</span> <span class="nx">GET</span>
</span><span class='line'><span class="nx">Connection</span><span class="o">:</span> <span class="nx">close</span>
</span><span class='line'><span class="nx">Content</span><span class="o">-</span><span class="nx">Length</span><span class="o">:</span> <span class="mi">5</span>
</span><span class='line'><span class="nx">Content</span><span class="o">-</span><span class="nx">MD5</span><span class="o">:</span> <span class="mi">65</span><span class="nx">tW24XBT3r1jLUpw0o0Fw</span><span class="o">==</span>
</span><span class='line'><span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">json</span>
</span><span class='line'><span class="nb">Date</span><span class="o">:</span> <span class="nx">Sun</span><span class="p">,</span> <span class="mi">19</span> <span class="nx">Feb</span> <span class="mi">2012</span> <span class="mi">16</span><span class="o">:</span><span class="mi">14</span><span class="o">:</span><span class="mi">13</span> <span class="nx">GMT</span>
</span><span class='line'><span class="nx">X</span><span class="o">-</span><span class="nx">Response</span><span class="o">-</span><span class="nx">Time</span><span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;hello roy&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>特性</h3>

<p>接触到<code>restify</code>是因为内部系统需要一个手机归属地的查询接口，基于<code>nodejs</code>和<code>redis</code>的高性能实现，决定快速实现一个，当时也很自然地选择了<code>express</code>作为web层。但<code>express</code>始终是一个Web MVC框架，它包含了一些我不太需要的功能实现（i.e., templating/rendering）。而我只是需要一个更纯粹的API接口而已&#8211;接收请求然后返回一个<code>JSON</code>结果集。</p>

<p>后来从推上找到了<code>restify</code>时，我就觉得这才是我想要的：</p>

<ol>
<li><p>路由</p>

<ul>
<li>基本等同于<code>express</code>/<code>sinatra</code>的路由方式</li>
<li>路由正则表达式支持</li>
<li>版本化支持</li>
</ul>
</li>
<li><p>自动选择内容格式进行响应，并可以自定义格式</p></li>
<li><p>内置REST风格的错误处理机制，重载了400和409来解析应答，得到一个包含<code>code</code>和<code>message</code>的JSON对象。也可以子类化<code>restify.RestError</code>实现自己错误代码和信息。</p>

<p> 已实现的RestError:</p>

<ul>
<li>RestError</li>
<li>BadDigestError</li>
<li>BadMethodError</li>
<li>InternalErrorError</li>
<li>InvalidArgumentError</li>
<li>InvalidContentError</li>
<li>InvalidCredentialsError</li>
<li>InvalidHeaderError</li>
<li>InvalidVersionError</li>
<li>MissingParameterError</li>
<li>NotAuthorizedError</li>
<li>RequestExpiredError</li>
<li>RequestThrottledError</li>
<li>ResourceNotFoundError</li>
<li>WrongAcceptError</li>
</ul>
</li>
<li><p>插件机制</p></li>
<li><p>DTrace支持，这个绝对是调式、诊断和性能测量利器</p></li>
</ol>


<p>虽然现在<code>restify</code>还是初生婴儿，我还是把上面提到的手机归属地查询接口改用了<code>restify</code>来实现了一个<a href="https://github.com/roymax/moquery">moquery</a>。</p>

<p>正如官方描述一样</p>

<pre><code>restify is a smallish framework, similar to `express` for building REST APIs. 
</code></pre>
<p><a rel="bookmark" href="http://roynotes.com/blog/2012/02/node-restify-intro/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Installing GitLab on Ubuntu Server 11.10]]></title>
<link href="http://roynotes.com/blog/2012/01/installing-gitlab-on-ubuntu-server-11-dot-10/"/>
<updated>2012-01-20T14:20:00+08:00</updated>
<id>http://roynotes.com/blog/2012/01/installing-gitlab-on-ubuntu-server-11-dot-10</id>

      <content type="html"><![CDATA[<p>打算在团队内推广Git，替换掉当前使用的SVN。所以打算挑选一个类GitHub的管理界面，最终在GitLab和Gitblit中选择了前者。本文为<a href="http://gitlabhq.com/">GitLab</a>在虚拟机下的安装过程。</p>

<h3>安装Ubuntu 11.10</h3>

<p>安装好Ubuntu Server后，我设置源指向163</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup
</span><span class='line'>$ sudo echo "" > /etc/apt/sources.list</span></code></pre></td></tr></table></div></figure>


<p>编辑source.list加入</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>deb http://mirrors.163.com/ubuntu/ oneiric main universe restricted multiverse 
</span><span class='line'>deb-src http://mirrors.163.com/ubuntu/ oneiric main universe restricted multiverse 
</span><span class='line'>deb http://mirrors.163.com/ubuntu/ oneiric-security universe main multiverse restricted 
</span><span class='line'>deb-src http://mirrors.163.com/ubuntu/ oneiric-security universe main multiverse restricted 
</span><span class='line'>deb http://mirrors.163.com/ubuntu/ oneiric-updates universe main multiverse restricted 
</span><span class='line'>deb http://mirrors.163.com/ubuntu/ oneiric-proposed universe main multiverse restricted 
</span><span class='line'>deb-src http://mirrors.163.com/ubuntu/ oneiric-proposed universe main multiverse restricted 
</span><span class='line'>deb http://mirrors.163.com/ubuntu/ oneiric-backports universe main multiverse restricted 
</span><span class='line'>deb-src http://mirrors.163.com/ubuntu/ oneiric-backports universe main multiverse restricted 
</span><span class='line'>deb-src http://mirrors.163.com/ubuntu/ oneiric-updates universe main multiverse restricted</span></code></pre></td></tr></table></div></figure>


<p>更新服务器并安装一些必要软件</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get dist-upgrade -y
</span><span class='line'>$ sudo apt-get install git-core openssh-server sendmail curl gcc libxml2-dev libxslt-dev sqlite3 libsqlite3-dev libcurl4-openssl-dev libreadline-dev libc6-dev libssl-dev libmysql++-dev make build-essential zlib1g-dev python-setuptools  </span></code></pre></td></tr></table></div></figure>


<p>如果使用VMWare的虚拟机，最好安装一下VMWare-tools</p>

<h3>安装rvm &amp; ruby</h3>

<p>gitlab需要使用ruby 1.9.2-p290，习惯了使用rvm来管理ruby版本，所以把rvm也安装一下</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
</span><span class='line'>$ source /etc/profile.d/rvm.sh
</span><span class='line'>$ type rvm | head -1
</span><span class='line'>rvm is a function
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#Rubies installed in system, gemsets separated per user:
</span><span class='line'>$ rvm user gemsets
</span><span class='line'>$ rvmsudo rvm install 1.9.2
</span><span class='line'>$ sudo -H -i   #切换到root
</span><span class='line'>$ rvm --default use 1.9.2
</span><span class='line'>$ exit #退出root
</span><span class='line'>$ rvm reload
</span><span class='line'>$ ruby -v
</span><span class='line'>ruby 1.9.2p290 (2011-07-09 revision 32553) [x86_64-linux]
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>基于速度的原因，把rubygem的源调整成<a href="http://ruby.taobao.org">taobao</a>的</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ gem sources -a http://ruby.taobao.org/
</span><span class='line'>$ gem sources --remove http://rubygems.org/
</span><span class='line'>$ gem sources -l 
</span><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>http://ruby.taobao.org/
</span><span class='line'>$ </span></code></pre></td></tr></table></div></figure>


<p>淘宝镜像上第1，2行跟我这里反过来的，按官网写法我无法删除rubygems的源，另外我的source文件<code>rubygems.org</code>域名后面是有<code>/</code>的，所以也要加入才能删除。</p>

<p>或直接通过手工编辑<code>vi ~/.gemrc</code>删除。</p>

<p>由于使用了rvm多用户模式所以部分命令需要加上<code>rvmsudo</code> 进行。</p>

<h3>安装rails</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rvmsudo gem update --system 1.8.14 #安装1.8.15会出错
</span><span class='line'>$ rvmsudo gem install rails</span></code></pre></td></tr></table></div></figure>


<p>或安装GitLab指定版本</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ rvmsudo gem install rails -v 3.1.1 --no-ri --no-rdoc</span></code></pre></td></tr></table></div></figure>


<h3>安装和设置Gitolite</h3>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo adduser \
</span><span class='line'>  --system \
</span><span class='line'>  --shell /bin/sh \
</span><span class='line'>  --gecos 'git version control' \
</span><span class='line'>  --group \
</span><span class='line'>  --disabled-password \
</span><span class='line'>  --home /home/git \
</span><span class='line'>  git
</span><span class='line'>
</span><span class='line'># Add your user to git group
</span><span class='line'>$ sudo usermod -a -G git `eval whoami` 
</span><span class='line'>
</span><span class='line'># Create ssh key
</span><span class='line'>$ ssh-keygen -t rsa
</span><span class='line'>
</span><span class='line'># copy your pub key to git home
</span><span class='line'>sudo cp ~/.ssh/id_rsa.pub /home/git/rails.pub
</span><span class='line'>
</span><span class='line'># clone gitolite
</span><span class='line'>sudo -u git -H git clone git://github.com/gitlabhq/gitolite /home/git/gitolite
</span><span class='line'>
</span><span class='line'># install gitolite
</span><span class='line'>sudo -u git -H /home/git/gitolite/src/gl-system-install
</span><span class='line'>
</span><span class='line'># Setup (Dont forget to set umask as 0007!! 搜索0077修改为0007)
</span><span class='line'>sudo -u git -H sh -c "PATH=/home/git/bin:$PATH; gl-setup ~/rails.pub"
</span><span class='line'>
</span><span class='line'>sudo chmod -R g+rwX /home/git/repositories/
</span><span class='line'>sudo chown -R git:git /home/git/repositories/
</span></code></pre></td></tr></table></div></figure>


<p>检查gitolite安装是否成功，先重新登录确保已经加入git用户组</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'># clone admin repo to add localhost to known_hosts
</span><span class='line'># & be sure your user has access to gitolite
</span><span class='line'>git clone git@localhost:gitolite-admin.git /tmp/gitolite-admin 
</span><span class='line'>
</span><span class='line'># if succeed  you can remote it
</span><span class='line'>rm -rf /tmp/gitolite-admin 
</span></code></pre></td></tr></table></div></figure>


<p>如果有下面类似提示</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>perl: warning: Setting locale failed.
</span><span class='line'>perl: warning: Please check that your locale settings:
</span><span class='line'>  LANGUAGE = "en_US:",
</span><span class='line'>  LC_ALL = (unset),
</span><span class='line'>  LC_CTYPE = "zh_CN.UTF-8",
</span><span class='line'>  LANG = "en_US.UTF-8"
</span><span class='line'>    are supported and installed on your system.
</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>sudo vi /etc/environment</code>添加以下内容到最后</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>LC_ALL="en_US.UTF-8"
</span><span class='line'>LANG="en_US.UTF-8"
</span><span class='line'>LANGUAGE="zh:en_US:en"</span></code></pre></td></tr></table></div></figure>


<p>保存后执行<code>source  /etc/environment</code>使其生效。</p>

<h3>安装和设置GitLab</h3>

<p>这里安装的是GitLab的Stable 2.1版本</p>

<h5>安装GitLab必须包</h5>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo apt-get install python-dev python-pip sendmail redis-server libicu-dev
</span><span class='line'>$ sudo pip install pygments
</span><span class='line'>$ sudo gem install bundler</span></code></pre></td></tr></table></div></figure>


<h3>安装gitlab</h3>

<p>按个人习惯将gitlab装在<code>/usr/local</code>目录下</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ sudo git clone -b stable git://github.com/gitlabhq/gitlabhq.git
</span><span class='line'>$ sudo chown -R `eval whoami`:`eval whoami` /usr/local/gitlabhq
</span><span class='line'>$ cd /usr/local/gitlabhq
</span><span class='line'>$ rvmsudo gem install charlock_holmes -v '0.6.8'</span></code></pre></td></tr></table></div></figure>


<p>修改GemFile的<code>http://rubygems.org</code>为<code>http://ruby.taobao.org/</code>，然后</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ bundle install --without development test 
</span><span class='line'>$ bundle exec rake db:setup RAILS_ENV=production
</span><span class='line'>$ bundle exec rake db:seed_fu RAILS_ENV=production</span></code></pre></td></tr></table></div></figure>


<h3>Start Server</h3>

<p><code>bundle exec rails s -e production</code></p>

<h3>测试安装</h3>

<p>打开 <code>http://&lt;ip&gt;:3000</code>，使用以下帐号和密码登录</p>

<p>User - <code>admin@local.host</code>
Password  - <code>5iveL!fe</code></p>

<p>进入<code>http://&lt;ip&gt;:3000/admin/users</code>新增一个用户，完成后退出管理帐号。</p>

<p>使用刚新增的用户登录，并进入<code>http://&lt;ip&gt;:3000/keys</code>添加一个ssh key，如果没有则生成一个（可以参考<a href="http://help.github.com/mac-set-up-git/">github设置你的Git</a>）。</p>

<p>返回首页，新建一个<code>project</code>成功后按系统提示操作</p>

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>$ mkdir mylab
</span><span class='line'>$ cd mylab
</span><span class='line'>$ git init
</span><span class='line'>$ touch README
</span><span class='line'>$ git add README
</span><span class='line'>$ git commit -m 'first commit'
</span><span class='line'>$ git remote add origin git@localhost:mylab.git   #将loaclhost换成你的ip
</span><span class='line'>$ git push -u origin master</span></code></pre></td></tr></table></div></figure>


<p>如果push成功，你应该可以通过浏览<code>http://&lt;ip&gt;:3000/mylab/repository</code>看到刚刚的第一次提交。</p>

<h3>后续安装</h3>

<p>通过安装<code>Passenger+Nginx</code>可以使用系统管理更加方便，可以<a href="https://github.com/gitlabhq/gitlabhq/wiki/V2.0-easy-setup-for-ubuntu">参考官方文档</a>介绍。</p>

<p>Enjoy!</p>

<hr />

<h3>参考资料</h3>

<ol>
<li><a href="http://firehare.blog.51cto.com/809276/743509">如何在Ubuntu Server 11.10上安装GitLab</a></li>
<li><a href="http://www.ossxp.com/doc/git/gitolite.html">Gitolite 构建 Git 服务器</a></li>
<li><a href="https://github.com/gitlabhq/gitlabhq/wiki/Gitolite">Create git user &amp; install gitolite</a></li>
<li><a href="http://www.ryanwersal.com/blog/2011/10/18/installing-gitlab-on-ubuntu-server/">Installing GitLab on Ubuntu Server</a></li>
<li><a href="https://github.com/gitlabhq/gitlabhq/wiki/Ubuntu.stable">GitLab stable版Ubuntu安装</a></li>
</ol>

<p><a rel="bookmark" href="http://roynotes.com/blog/2012/01/installing-gitlab-on-ubuntu-server-11-dot-10/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[安装autoddvpn]]></title>
<link href="http://roynotes.com/blog/2012/01/an-zhuang-autoddvpn/"/>
<updated>2012-01-19T16:27:00+08:00</updated>
<id>http://roynotes.com/blog/2012/01/an-zhuang-autoddvpn</id>

      <content type="html"><![CDATA[<p>在家已经成功部署autoddvpn近两个月，所以在家里上网的感觉特好（偶尔拉风一下），特记录下来为大家做一次明灯。</p>

<h3>动机</h3>

<p>在用dd-wrt方案前，我用的是ssh tunnel再加上本地autopac，基本已经是一个无敌的解决方案了，也特靠谱的。但家里设备一多，你得想尽办法为每台设备折腾一下，找解决方案。折腾的这些东西都是很折腾人的。与其这样，何不在路由上做功夫，一劳永逸呢。</p>

<h3>需要环境</h3>

<ul>
<li>有一台可刷DD-WRT的设备 ( <a href="http://dd-wrt.com/site/support/router-database">你的路由支持吗？</a> )</li>
<li>一个PPTP或OpenVPN 帐号</li>
<li>ADSL上网环境</li>
</ul>


<h3>准备</h3>

<h5>关于DD-WRT路由器</h5>

<p>家里正好有两台设备，一台是D-Link DIR-605 D1 ,通过查询是wip状态:</p>

<p>work in progress, router support is in the works, but please don&#8217;t ask how long it takes, we cannot give you a schedule in the most cases.</p>

<p>另一台为Netgear WGR614 v9，非常悲剧也是wip。正要放弃准备购买新设备时得知，DIR-605可以刷DIR-615 D2，经过两个晚上的几个小时尝试最终也刷成功，但最后我还是买了一台路由器，因为DIR-605无论如何也支持不了OpenVPN。</p>

<p>如果设备支持OpenVPN，在下载页会列出标有vpn字样的下载链接</p>

<p>我为什么需要OpenVPN？因为我拥有一个Astrill的VPN帐号<a href="http://xcarshop.com" title="Astrill推广链接">推广链接</a>，就因为这个家伙介绍支持DD-WRT我才知晓可以这样玩. Astrill VPN本身是不支持多设备同时登录，通过DD-WRT则可允许7台设备同时使用。</p>

<p>当时我还不知道有autoddvpn这个东西，只能按Astrill的安装介绍来寻找一台支持OpenVPN版本的DD-WRT路由器了。而<a href="https://www.astrill.com/knowledge-base/52/What-Router-for-OpenVPN.html">Astrill推荐</a>了<strong>Asus RT-N16</strong>和<strong>Linksys WRT 160N</strong>，刚好有朋友从香港回来就托运了一台，这样又多花费550人左右。所以我最后用的设备是RT-N16。</p>

<p>事实上，你不需要OpenVPN，用PPTP也是可以的，只要按照autoddvpn的文档写好你的脚本。通过Astrill的安装界面只是图个方便而已。这里我用“可能”来描述是因为我没有进行测试。只不过到后来我也放弃了Astrill的内置安装模式。</p>

<h5>关于PPTP或OpenVPN帐号</h5>

<p>刚才我说了，我的解决方案是<a href="http://xcarshop.com" title="Astrill推广链接">Astrill</a>，大概一年70刀，最近又涨价了。而且现在竟然将DD-WRT单独出来做增值收费, 需要另付 $1/月。</p>

<p>如果你有root权限的主机，自建一个OpenVPN Server也是不错的选择。反正我就没有时间折腾，留给后来人做。</p>

<p>而淘宝上也有很多廉价VPN，总会有你合适的吧。想不花点钱还是不太靠谱吧？</p>

<p>顺便说说Astrill的优势在于服务器节点多，虽然很多速度也不怎么样，但香港节点和美国部分节点都非常的快，而且都不限流量。试过有一次通过New York节点下载XCode 4 ，是<strong>1MB/秒</strong>的速度。</p>

<h5>ADSL</h5>

<p>中国电信的8M ADSL</p>

<h3>安装调试</h3>

<h5>刷新固件</h5>

<p>硬件准备好后就可以开始刷设备了，从dd-wrt.com下载合适的rom文件到本地。针对我的RT-N16，我一共下载了三个文件</p>

<ul>
<li>dd-wrt.v24-14896_NEWD-2_K2.6_mini_RT-N16.trx</li>
<li>dd-wrt.v24-14896_NEWD-2_K2.6_mini.bin</li>
<li>dd-wrt.v24-14896_NEWD-2_K2.6_openvpn.bin</li>
</ul>


<p>用网线接上路由器，访问路由器设置网，找到通过本地上传方式<strong>更新固件</strong>的位置，必须先刷第一个文件，即扩展名为.trx的那个。刷新成功后，再刷其它，都非常简单就不表了。可以看看<a href="http://www.dd-wrt.com/wiki/index.php/Asus_RT-N16">这里</a></p>

<h5>设置路由</h5>

<p>如果使用的是Astrill服务，非常简单。连上网络后通过Astrill的客户端调出安装界面按提示执行就可以了。安装成功后在DD-WRT的路由设置页面进行设置，而且有专门针对GFW的设置，其实原理跟autoddvpn差不多，通过判断IP是否在墙内选择链路。</p>

<p>不过最后，我还是选择了使用autoddvpn介绍的最好模式graceMode。通过Astrill的傻瓜方式虽然可行，但：</p>

<ul>
<li>连接服务不知为何非常的慢。</li>
<li>访问国内网站cdn cache会失效</li>
<li>依赖VPN的稳定性，试过几次VPN掉了连国内网站都访问不到</li>
</ul>


<p>而autoddvpn是反向处理，使用的是本地DNS，对于部分指定的域名才走VPN链路。所以就算VPN不稳定的情况下，至少能保障国内的网站可以访问。</p>

<p>至于如何设置autoddvpn这里不说了，我认为官方的文档已经足够详细。如果你也像我一样使用Astrill VPN服务的话，通过ssh登录路由器，准备你的OpenVPN设置。</p>

<p>openvpn.conf文件需要用到的证书可以通过登录as trill的会员中心<em>VPN SERVICES -  OpenVPN certificates</em> 下载。<em>Server List</em>则可以获取当前的服务器状态和IP，选择几个最快的节点吧，我使用的是HK1和NY1。</p>

<h3>使用感受</h3>

<p>两个月来，在家上网的体验是最好的，唯一不足是最近路由器竟然连接不上，会自动死掉也不会重启，重启后很快又正常。也不知道是否因为刷了DD-WRT而不稳定，我听朋友说他家的官ROM还是非常稳定的，有空时我想重刷一次看看效果。</p>

<p>这样作在家里用倒不错，但出门后就有点麻烦了。手机还好，需要那个情况不好，而且twitter也可以用API Proxy解决。所以我的Mac还是装用iSSH和PAC以备不时之需。其实我想过段日子每天出街自备一个TP—LINK TL-WR800N，连上网络后再接家里的VPN Server端口再访问出去……但多绕啊！再看看吧，不一定弄了。</p>

<p>最后感觉变成Astrill的推广文了，不写了…其实我觉得如果有Linode的东京节点，自建个OpenVPN Server应该也是不错的选择。</p>

<p>如有问题欢迎跟我交流联系.</p>
<p><a rel="bookmark" href="http://roynotes.com/blog/2012/01/an-zhuang-autoddvpn/">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[sinaly将退伇]]></title>
<link href="http://roynotes.com/blog/sinaly-will-be-discontinued"/>
<updated>2011-11-11T00:00:00+08:00</updated>
<id>http://roynotes.com/blog/sinaly-will-be-discontinued</id>

      <content type="html"><![CDATA[<p>一大早的，见到<a title="trunk.ly已经被AVOS收购，将整合到Delicious" href="http://blog.trunk.ly/2011/11/10/avos-acquires-trunkly/" target="_blank">trunk.ly已经被AVOS收购，将整合到Delicious</a>，同时trunk.ly将于2012年1月13日停止运作。那么我的同步程序<a title="发布我的应用–SiNALY" href="http://blog.roynotes.com/sinaly-python-released/" target="_blank">Sinaly</a>也可以于同一天停止动作了，大家尽快适应Delicious吧。</p>

<p>现在我的问题是还不知道如何将旧delicious的书签导入到新版？又如何将trunkly导入？</p>

<p>后者trunkly正在努力，我相信会有好的解决方案，祝贺trunk.ly团队</p>
<p><a rel="bookmark" href="http://roynotes.com/blog/sinaly-will-be-discontinued">&#9875; Permalink</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[gitbox=git+dropbox]]></title>
<link href="http://roynotes.com/blog/gitbox"/>
<updated>2011-10-19T00:00:00+08:00</updated>
<id>http://roynotes.com/blog/gitbox</id>

      <content type="html"><![CDATA[自从没有每天背着手提电脑上班后，感觉颈椎真的轻松了很多，为了身体，未来一段时间也不会背着电脑移动。但电脑不移动后，就要想办法将办公室与家里的电脑同步，以保持文档版本的一致性。

现在云服务非常流行，当然将主要文档同步到云端去，我选择了一直使用的dropbox做简单的文档同步就好了。而又有一些属于私人性质的项目代码使用Git进行版本控制，当然我暂时不想将它们公开放到github，又不想购买私有仓库。当然用 [bitbucket](https://bitbucket.org/) 也不错，它现在已经提供免费的git私有仓库了。当然用dropbox DIY一个其实也挺靠谱的，你只需要这样做:

<figure class='code'><div class='highlight'><table><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='plain'><span class='line'>#工作目录 
</span><span class='line'>~/project $ git init
</span><span class='line'>~/project $ git add .
</span><span class='line'>~/project $ git commit -m "first commit"
</span><span class='line'>~/project $ cd ~/Dropbox/git
</span><span class='line'>
</span><span class='line'>#Dropbox目录 
</span><span class='line'>~/Dropbox/git $ mkdir project.git
</span><span class='line'>~/Dropbox/git $ cd project.git
</span><span class='line'>~/Dropbox/git $ git init --bare
</span><span class='line'>~/Dropbox/git $ cd ~/project
</span><span class='line'>
</span><span class='line'>#将工作目录推送到Dropbox云端
</span><span class='line'>~/project $ git remote add origin ~/Dropbox/git/project.git
</span><span class='line'>~/project $ git push origin master</span></code></pre></td></tr></table></div></figure>

<p><a rel="bookmark" href="http://roynotes.com/blog/gitbox">&#9875; Permalink</a></p>]]></content>
    </entry>
  
</feed>
